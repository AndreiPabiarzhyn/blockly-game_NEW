// app.js ‚Äî 15 —É—Ä–æ–≤–Ω–µ–π, —Å–µ—Ç–∫–∞ 8x8. 1‚Äì5 –±–µ–∑ —Ü–∏–∫–ª–∞, 6‚Äì10 —Å —Ü–∏–∫–ª–æ–º, 11‚Äì15 ¬´‚òÖ¬ª —Å–ª–æ–∂–Ω—ã–µ.
// –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å).
// –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –∑—É–º ¬±15%. –ú–æ–¥–∞–ª–∫–∏, –∑–≤—É–∫–∏, –∞–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∞–ª—é—Ç.

(function () {
  // ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ =====
  const MOVE_MS = 260;       // –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏—è (–±—ã–ª–æ ~160)
  const COIN_DELAY = 120;    // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–æ–º –º–æ–Ω–µ—Ç—ã
  const COIN_POP_MS = 320;   // –≤—Å–ø—ã—à–∫–∞/–ø—É–ª—å—Å –º–æ–Ω–µ—Ç—ã

  // ===== DOM =====
  const blocklyDiv = document.getElementById("blocklyDiv");
  const stage = document.getElementById("stage");
  const ctx   = stage.getContext("2d");

  const levelLabel = document.getElementById("levelLabel");
  const consoleBox = document.getElementById("console");

  const btnRun   = document.getElementById("btnRun");
  const btnReset = document.getElementById("btnReset");
  const btnHint  = document.getElementById("btnHint");
  const btnPrev  = document.getElementById("btnPrev");
  const btnNext  = document.getElementById("btnNext");
  const actionsBar = document.getElementById('actionsBar');

  // –º–æ–¥–∞–ª–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–æ–¥—Å–∫–∞–∑–∫–∏, —Å—Ç–∞—Ä—Ç–∞, —Ñ–∏–Ω–∞–ª–∞
  const modalResult    = document.getElementById("modalResult");
  const resultImg      = document.getElementById("resultImg");
  const resultTitle    = document.getElementById("resultTitle");
  const resultMsg      = document.getElementById("resultMsg");
  const btnResultClose = document.getElementById("btnResultClose");
  const btnNextLevel   = document.getElementById("btnNextLevel");

  const modalHint      = document.getElementById("modalHint");
  const hintText       = document.getElementById("hintText");
  const btnHintClose   = document.getElementById("btnHintClose");
  const btnAutoStart   = document.getElementById("btnAutoStart"); // –º—ã –µ—ë —É–¥–∞–ª–∏–º

  const modalStart     = document.getElementById("modalStart");
  const btnStart       = document.getElementById("btnStart");

  // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ —Å–æ–∑–¥–∞–¥–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  let finalModal = null;

  // ===== –°–æ—Å—Ç–æ—è–Ω–∏–µ =====
  let workspace;
  let currentLevel = 0;
  let grid = 8, cell = 56;
  const player = { x: 0, y: 0, rx: 0, ry: 0 };
  let coins = [];

  // ===== –ê—Å—Å–µ—Ç—ã =====
  const imgPlayer = new Image(); imgPlayer.src = "assets/player.png";
  const imgCoin   = new Image(); imgCoin.src   = "assets/coin.png";
  const sWin  = new Audio("assets/win.mp3");
  const sFail = new Audio("assets/fail.mp3");
  sWin.preload = "auto"; sFail.preload = "auto";

  // Blockly –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  const JS = Blockly.JavaScript || Blockly.javascriptGenerator;

  // ===== –£—Ç–∏–ª–∏—Ç—ã =====
  const clamp = (v, min, max) => Math.max(min, Math.min(max, v));
  const log   = (t) => { consoleBox.textContent = t; };
  const bodyLock = (on) => document.body.classList.toggle('modal-open', !!on);
  const sleep = (ms) => new Promise(res => setTimeout(res, ms));

  // ===== –ú–æ–¥–∞–ª–∫–∏ =====
  function showResult(ok, message) {
    if (ok) {
      resultImg.src = "assets/correct.gif";
      resultTitle.textContent = "–û—Ç–ª–∏—á–Ω–æ!";
      resultMsg.textContent   = message || "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.";
      btnNextLevel.style.display = (currentLevel < window.LEVELS.length - 1) ? "inline-flex" : "none";
      try { sWin.currentTime = 0; sWin.play(); } catch {}
    } else {
      resultImg.src = "assets/incorrect.png";
      resultTitle.textContent = "–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å";
      resultMsg.textContent   = message || "–ü—Ä–æ–≤–µ—Ä—å –±–ª–æ–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.";
      btnNextLevel.style.display = "none";
      try { sFail.currentTime = 0; sFail.play(); } catch {}
    }
    modalResult.setAttribute("aria-hidden", "false");
    bodyLock(true);
  }
  function hideResult() { modalResult.setAttribute("aria-hidden", "true"); bodyLock(false); }

  function showHint() {
    const L = window.LEVELS[currentLevel];
    hintText.textContent = L.hint || "–ü–æ–¥—É–º–∞–π: –≥–¥–µ –º–æ–Ω–µ—Ç—ã –∏ –∫–∞–∫ —Ç—É–¥–∞ –¥–æ–π—Ç–∏?";
    modalHint.setAttribute("aria-hidden", "false");
    bodyLock(true);
  }
  function hideHint() { modalHint.setAttribute("aria-hidden", "true"); bodyLock(false); }

  function showFinalPrize() {
    if (!finalModal) {
      finalModal = document.createElement('div');
      finalModal.className = 'prize-modal';
      finalModal.innerHTML = `
        <div class="prize-card">
          <h2>–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–≤–Ω–∏! üéâ</h2>
          <p>–í–æ—Ç —Ç–≤–æ–π –ø—Ä–∏–∑!</p>
          <img src="assets/prize.png" alt="–ü—Ä–∏–∑" class="prize-img" onerror="this.style.display='none'">
          <div class="fireworks">
            <div class="firework"></div>
            <div class="firework delay1"></div>
            <div class="firework delay2"></div>
          </div>
          <div class="prize-actions">
            <button id="btnRestartAll">–°–Ω–∞—á–∞–ª–∞</button>
          </div>
        </div>`;
      document.body.appendChild(finalModal);
      finalModal.querySelector('#btnRestartAll').addEventListener('click', () => {
        finalModal.remove();
        finalModal = null;
        bodyLock(false);
        loadLevel(0);
      });
    }
    finalModal.style.display = 'flex';
    bodyLock(true);

    const audio = document.getElementById("end-audio");
    if (audio) {
      audio.currentTime = 0;
      audio.play();
    }
  }

  // ===== –°—Ü–µ–Ω–∞ =====
  function draw() {
    ctx.clearRect(0,0,stage.width,stage.height);

    // —Å–µ—Ç–∫–∞
    ctx.save(); ctx.globalAlpha = 0.22; ctx.strokeStyle = "#94a3b8";
    for (let i=0;i<=grid;i++){
      ctx.beginPath(); ctx.moveTo(i*cell,0); ctx.lineTo(i*cell,grid*cell); ctx.stroke();
      ctx.beginPath(); ctx.moveTo(0,i*cell); ctx.lineTo(grid*cell,i*cell); ctx.stroke();
    }
    ctx.restore();

    // –º–æ–Ω–µ—Ç—ã
    coins.forEach(c=>{
      if (c.taken) return;
      if (imgCoin.complete && imgCoin.naturalWidth>0)
        ctx.drawImage(imgCoin, c.x*cell+cell*0.2, c.y*cell+cell*0.2, cell*0.6, cell*0.6);
      else { ctx.fillStyle = "#f59e0b";
        ctx.beginPath(); ctx.arc(c.x*cell+cell/2, c.y*cell+cell/2, cell*0.26, 0, Math.PI*2); ctx.fill(); }
    });

    // –∏–≥—Ä–æ–∫
    if (imgPlayer.complete && imgPlayer.naturalWidth>0)
      ctx.drawImage(imgPlayer, player.rx, player.ry, cell, cell);
    else { ctx.fillStyle="#22d3ee"; ctx.fillRect(player.rx, player.ry, cell, cell); }
  }

  function resizeBlockly() { if (workspace) Blockly.svgResize(workspace); }
  function resizeStage() {
    const wrap = document.querySelector(".stage-wrap");
    const size = Math.min(wrap.clientWidth - 16, 560);
    stage.width = stage.height = size;
    cell = Math.floor(size / grid);
    player.rx = player.x * cell; player.ry = player.y * cell;
    draw();
  }

  // –≤—Å–ø—ã—à–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–æ–Ω–µ—Ç—ã
  function coinPopFX(cx, cy) {
    return new Promise(resolve => {
      const start = performance.now();
      const loop = (t) => {
        const p = Math.min(1, (t - start) / COIN_POP_MS);
        draw(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ü–µ–Ω—É
        const x = cx * cell + cell / 2;
        const y = cy * cell + cell / 2;
        ctx.save();
        ctx.globalAlpha = 1 - p;
        ctx.lineWidth = 3;
        ctx.strokeStyle = "#f59e0b";
        ctx.beginPath();
        ctx.arc(x, y, cell * (0.25 + 0.35 * p), 0, Math.PI * 2);
        ctx.stroke();
        ctx.restore();
        if (p < 1) requestAnimationFrame(loop);
        else resolve();
      };
      requestAnimationFrame(loop);
    });
  }

  function positionActionsBar() {
  // –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
  const right = document.querySelector('.right');
  const topbar = document.querySelector('.topbar');
  if (!right || !topbar || !actionsBar) return;

  const r = right.getBoundingClientRect();
  const tb = topbar.getBoundingClientRect();
  const barW = actionsBar.offsetWidth;

  // —Ü–µ–Ω—Ç—Ä –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –º–∏–Ω—É—Å –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –±–ª–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  let left = (r.left + r.width / 2) - (barW / 2) - tb.left;

  // –Ω–µ–±–æ–ª—å—à–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–µ–∑–∂–∞—Ç—å –Ω–∞ –∫—Ä–∞—è
  left = Math.max(12, Math.min(left, tb.width - barW - 12));

  actionsBar.style.left = `${left}px`;
}

// –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
window.addEventListener('resize', positionActionsBar);
new ResizeObserver(positionActionsBar).observe(document.querySelector('.right'));
new ResizeObserver(positionActionsBar).observe(document.querySelector('.topbar'));

// –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –∫–æ–≥–¥–∞ –≤—Å—ë –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–æ—Å—å
requestAnimationFrame(positionActionsBar);

  // —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–±–µ–∑ –±–ª–æ–∫–æ–≤)
  function resetPlayfield() {
    const L = window.LEVELS[currentLevel];
    grid = L.grid;
    const wrap = document.querySelector(".stage-wrap");
    const size = Math.min(wrap.clientWidth - 16, 560);
    stage.width = stage.height = size;
    cell = Math.floor(size / grid);
    player.x = L.player.x; player.y = L.player.y;
    player.rx = player.x * cell; player.ry = player.y * cell;
    coins = L.coins.map(c => ({ ...c, taken: false }));
    draw();
  }

  // ===== –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —à–∞–≥–∞ =====
  function tweenTo(nx, ny, ms = MOVE_MS) {
    return new Promise(resolve=>{
      const sx=player.rx, sy=player.ry, ex=nx*cell, ey=ny*cell;
      if (sx===ex && sy===ey) { resolve(); return; }
      let t0=null;
      const step=(ts)=>{
        if (t0===null) t0=ts;
        const p=Math.min(1,(ts-t0)/ms), e=p*(2-p);
        player.rx = sx + (ex - sx)*e;
        player.ry = sy + (ey - sy)*e;
        draw();
        if (p<1) requestAnimationFrame(step);
        else { player.x=nx; player.y=ny; player.rx=ex; player.ry=ey; draw(); resolve(); }
      };
      requestAnimationFrame(step);
    });
  }

  // ===== API –¥–ª—è –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ =====
  function __move(dx, dy) {
    const nx = clamp(player.x + (dx|0), 0, grid-1);
    const ny = clamp(player.y + (dy|0), 0, grid-1);
    return tweenTo(nx, ny, MOVE_MS);
  }

  async function __pick() {
    const t = coins.find(c => !c.taken && c.x === player.x && c.y === player.y);
    if (t) {
      await sleep(COIN_DELAY);
      t.taken = true;                 // –º–æ–Ω–µ—Ç–∞ –∏—Å—á–µ–∑–∞–µ—Ç
      await coinPopFX(t.x, t.y);      // –≤—Å–ø—ã—à–∫–∞
      draw();
    }
  }
  const isWin = () => coins.every(c=>c.taken);
  window.__move = __move; window.__pick = __pick;

  // ===== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç—É–ª–±–æ–∫—Å =====
  function buildToolboxXML(hasLoop) {
    const xml = document.createElement('xml');
    xml.setAttribute('id', 'toolbox');
    xml.setAttribute('style', 'display:none');

    const add = (tag, attrs = {}) => {
      const el = document.createElement(tag);
      Object.entries(attrs).forEach(([k, v]) => el.setAttribute(k, v));
      xml.appendChild(el); return el;
    };

    // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –µ—Å—Ç—å –≤ —Ç—É–ª–±–æ–∫—Å–µ (–Ω–µ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è)
    add('block', { type: 'when_run' });

    // –î–≤–∏–∂–µ–Ω–∏–µ
    add('block', { type: 'move_right' });
    add('block', { type: 'move_left'  });
    add('block', { type: 'move_up'    });
    add('block', { type: 'move_down'  });

    // –¶–∏–∫–ª ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π, –≥–¥–µ –Ω–∞–¥–æ
    if (hasLoop) {
      const rep = add('block', { type: 'controls_repeat_ext' });
      const val = document.createElement('value'); val.setAttribute('name','TIMES'); rep.appendChild(val);
      const sh  = document.createElement('shadow'); sh.setAttribute('type','repeat_count'); val.appendChild(sh);
    }

    add('block', { type: 'pick_coin' });
    return xml;
  }

  // –ü–æ–¥—Å—á—ë—Ç –±–ª–æ–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–±–µ–∑ when_run)
  function countProgramBlocks(start) {
    const seen = new Set();
    function visit(b) {
      if (!b || seen.has(b.id)) return 0;
      seen.add(b.id);
      let n = (b.type === 'when_run') ? 0 : 1;
      for (const name of ['DO','BODY']) {
        const inp = b.getInput?.(name);
        const child = inp?.connection?.targetBlock?.();
        if (child) n += visit(child);
      }
      const next = b.getNextBlock?.();
      if (next) n += visit(next);
      return n;
    }
    return visit(start);
  }

  // ===== –†–∞–±–æ—Ç–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ =====
  function loadLevel(idx) {
    currentLevel = Math.max(0, Math.min(window.LEVELS.length - 1, idx));
    const L = window.LEVELS[currentLevel];
    grid = L.grid;

    // —Å—Ü–µ–Ω–∞
    const wrap = document.querySelector(".stage-wrap");
    const size = Math.min(wrap.clientWidth - 16, 560);
    stage.width = stage.height = size;
    cell = Math.floor(size / grid);

    // —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    player.x = L.player.x; player.y = L.player.y;
    player.rx = player.x * cell; player.ry = player.y * cell;
    coins = L.coins.map(c => ({ ...c, taken: false }));

    levelLabel.textContent = `–£—Ä–æ–≤–µ–Ω—å ${currentLevel+1}/${window.LEVELS.length}${L.hard ? " ‚òÖ" : ""}`;
    draw();

    // —Ç—É–ª–±–æ–∫—Å –ø–æ —É—Ä–æ–≤–Ω—é
    const hasLoop = !!(L.require && L.require.loops);
    workspace.updateToolbox(buildToolboxXML(hasLoop));

    // –±–ª–æ–∫–∏ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Å—Ç–∞–≤–∏—Ç "–ö–æ–≥–¥–∞ –∑–∞–ø—É—â–µ–Ω–æ"
    workspace.clear();
    log(L.hint || "–°–æ–±–µ—Ä–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã.");
  }

  // ===== –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É =====
  function getStartBlock() {
    const arr = workspace.getBlocksByType
      ? workspace.getBlocksByType("when_run", false)
      : workspace.getAllBlocks(false).filter(b => b.type === "when_run");
    return arr && arr[0];
  }

  function failReset(message) {
    showResult(false, message);
    resetPlayfield(); // –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ü–µ–Ω—É, –±–ª–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è
  }

  async function run() {
    const L = window.LEVELS[currentLevel];

    const start = getStartBlock();
    if (!start) return failReset("–î–æ–±–∞–≤—å –±–ª–æ–∫ ¬´–ö–æ–≥–¥–∞ –∑–∞–ø—É—â–µ–Ω–æ¬ª –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫ –Ω–µ–º—É –∫–æ–º–∞–Ω–¥—ã.");
    const first = start.getNextBlock();
    if (!first) return failReset("–ö –±–ª–æ–∫—É ¬´–ö–æ–≥–¥–∞ –∑–∞–ø—É—â–µ–Ω–æ¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.");

    const used = countProgramBlocks(start);
    const minAllowed = (L.limits?.min ?? 1);
    const maxAllowed = (L.limits?.max ?? 99);
    if (used < minAllowed) return failReset(`–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${minAllowed} –±–ª–æ–∫(–∞).`);
    if (used > maxAllowed) return failReset(`–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞. –ú–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º ${maxAllowed} –±–ª–æ–∫–æ–≤.`);

    if (L.require && L.require.loops) {
      const usedLoop = workspace.getAllBlocks(false)
        .some(b => b.type === "controls_repeat" || b.type === "controls_repeat_ext");
      if (!usedLoop) return failReset("–ù–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª.");
    }

    if (JS?.init) JS.init(workspace);
    let code = JS?.blockToCode ? JS.blockToCode(first) : "";
    if (Array.isArray(code)) code = code[0] || "";
    if (JS?.finish) code = JS.finish(code);

    const wrapped = `(async () => { try { ${code} } catch(e){ throw e; } })()`;
    try { /* eslint-disable no-eval */ await eval(wrapped); }
    catch (e) { return failReset("–í –±–ª–æ–∫–∞—Ö –µ—Å—Ç—å –æ—à–∏–±–∫–∞: " + e.message); }

    if (isWin()) {
      if (currentLevel === window.LEVELS.length - 1) {
        showFinalPrize(); // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –∏ —Å–∞–ª—é—Ç
      } else {
        showResult(true, "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –º–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã.");
      }
    } else {
      failReset("–ù–µ –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
    }
  }

  // ===== –¢–µ–º–∞ –∏ Workspace =====
  const HighContrast = Blockly.Theme.defineTheme("HighContrast", {
    base: Blockly.Themes.Classic,
    componentStyles: {
      workspaceBackgroundColour: "#0b1220",
      toolboxBackgroundColour:   "#0f172a",
      toolboxForegroundColour:   "#e5e7eb",
      flyoutBackgroundColour:    "#0b1220",
      flyoutForegroundColour:    "#e5e7eb",
      flyoutOpacity: 1,
      scrollbarColour: "#64748b",
      insertionMarkerColour: "#22d3ee",
      insertionMarkerOpacity: 0.6,
      scrollbarOpacity: 0.8,
      cursorColour: "#22d3ee",
    },
  });

  workspace = Blockly.inject("blocklyDiv", {
    toolbox: document.getElementById("toolbox"), // –ø–æ–¥–º–µ–Ω—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    theme: HighContrast,
    grid: { spacing: 28, length: 3, colour: "#64748b", snap: true },
    move: { scrollbars: false, drag: true, wheel: true },
    zoom: { controls: true, wheel: true, pinch: true, startScale: 1, minScale: 0.85, maxScale: 1.15, scaleSpeed: 1.1 },
    trashcan: true,
    renderer: "geras",
  });

  // –†–∞–∑—Ä–µ—à–∏–º —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  workspace.addChangeListener((ev) => {
    if (!ev || !ev.blockId) return;
    const b = workspace.getBlockById(ev.blockId);
    if (!b || b.type !== 'when_run' || !b.setDeletable) return;
    if (!b.isDeletable?.()) b.setDeletable(true);
  });

  // –ö–Ω–æ–ø–∫—É –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Äî —É–±–∏—Ä–∞–µ–º
  btnAutoStart?.remove();

  // ===== –°–ª—É—à–∞—Ç–µ–ª–∏ =====
  const leftPane = document.querySelector('.left');
  new ResizeObserver(() => resizeBlockly()).observe(leftPane);
  window.addEventListener("resize", resizeBlockly);
  new ResizeObserver(() => resizeStage()).observe(document.querySelector(".stage-wrap"));

  btnRun.addEventListener("click", run);
  btnReset.addEventListener("click", () => loadLevel(currentLevel));
  btnPrev.addEventListener("click", () => loadLevel(currentLevel - 1));
  btnNext.addEventListener("click", () => loadLevel(currentLevel + 1));
  btnHint.addEventListener("click", showHint);
  btnHintClose.addEventListener("click", hideHint);
  btnResultClose.addEventListener("click", hideResult);
  btnNextLevel.addEventListener("click", () => { hideResult(); loadLevel(currentLevel + 1); });

  // ===== –°—Ç–∞—Ä—Ç =====
  resizeBlockly(); requestAnimationFrame(resizeBlockly); setTimeout(resizeBlockly, 50);
  resizeStage();

  if (modalStart) { modalStart.setAttribute("aria-hidden", "false"); bodyLock(true); }
  btnStart?.addEventListener("click", () => { modalStart.setAttribute("aria-hidden", "true"); bodyLock(false); loadLevel(0); });
})();
